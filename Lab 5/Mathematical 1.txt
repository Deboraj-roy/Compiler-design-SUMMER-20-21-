#include <iostream>
using namespace std;


bool Alphabet(char a)
{

       if (a == 'a' || a == 'b'||a == 'c' ||a == 'd' || a == 'e'
            || a == 'f' || a == 'g' || a == 'h' || a == 'i' ||
            a == 'j' || a == 'k' || a == 'l' || a == 'm' || a == 'n'
            || a == 'n' || a == 'o' || a == 'p' || a == 'q' || a == 'r'
            || a == 's' || a == 't' || a == 'u' || a == 'v' || a == 'w'
            || a == 'x' || a == 'y' || a == 'z'
            || a == 'A' || a == 'B' || a == 'C' || a == 'D' || a == 'E'
            || a == 'F' || a == 'G' || a == 'H' || a == 'I' || a == 'J' || a == 'K'
            || a == 'L' || a == 'M' || a == 'N' || a == 'O' || a == 'P'
            || a == 'Q' || a == 'R' || a == 'S' || a == 'T' || a == 'U' || a == 'V'
            || a == 'W' || a == 'X' || a == 'Y' || a == 'Z' || a == '=')
    {
       return (true);
    }
    else
        return (false);


}

bool isOperand(char T)
{
    return ((T >= '0' && T <= '9')|| Alphabet(T)) ;
}

int value(char T)
{
    return (T - '0');
}

int Check(char *exp)
{

    if (*exp == '\0')
    {
        cout<<"Given expression is empty!\n";
        return -1;

    }


    for (int i = 1; exp[i]; i += 2)
    {

        char opr = exp[i], opd = exp[i+1];


        if (!isOperand(opd))
        {
            return -1;
        }


    }

    return 1;

}

int main()
{
    char expression[100];
    int result;

    cout<<"Enter your Mathematical Expression : ";
    cin>>expression;
    cout<<"\n"<<endl;

    result = Check(expression);
    if(result == -1)
    {
        cout << "Given "<<expression << " is " << "Invalid!\n";
    }
    else
    {
        cout << "Given " << expression << " is " << "Valid.\n" << endl;
    }


    return 0;
}


________________________________________________________________________________________________________________________________________________________________________________________________

A=w+c-R/4*p
________________________________________________________________________________________________________________________________________________________________________________________________


#include <iostream>
using namespace std;

// A utility function to check if a given character is operand
bool isOperand(char c)
{
    return (c >= '0' && c <= '9');
}

// utility function to find value of and operand
int value(char c)
{
    return (c - '0');
}

// This function evaluates simple expressions. It returns -1 if the
// given expression is invalid.
int evaluate(char *exp)
{
    // Base Case: Given expression is empty
    if (*exp == '\0')  return -1;

    // The first character must be an operand, find its value
    int res = value(exp[0]);

    // Traverse the remaining characters in pairs
    for (int i = 1; exp[i]; i += 2)
    {
        // The next character must be an operator, and
        // next to next an operand
        char opr = exp[i], opd = exp[i+1];

        // If next to next character is not an operand
        if (!isOperand(opd))  return -1;

        // Update result according to the operator
        if (opr == '+')       res += value(opd);
        else if (opr == '-')  res -= value(opd);
        else if (opr == '*')  res *= value(opd);
        else if (opr == '/')  res /= value(opd);

        // If not a valid operator
        else                  return -1;
    }
    return res;
}

// Driver program to test above function
int main()
{
    char expr1[] = "1+2*5+3";
    int res = evaluate(expr1);
    (res == -1)? cout << expr1 << " is " << "Invalid\n":
                      cout << "Value of " << expr1 << " is " << res << endl;

    char expr2[] = "1+2*3";
    res = evaluate(expr2);
    (res == -1)? cout << expr2 << " is " << "Invalid\n":
                      cout << "Value of " << expr2 << " is " << res << endl;

    char expr3[] = "4-2+6*3";
    res = evaluate(expr3);
    (res == -1)? cout << expr3 << " is " << "Invalid\n":
                      cout << "Value of " << expr3 << " is " << res << endl;

    char expr4[] = "1++2";
    res = evaluate(expr4);
    (res == -1)? cout << expr4 << " is " << "Invalid\n":
                      cout << "Value of " << expr4 << " is " << res << endl;
    return 0;
}



_________________________________________________________________________________________________________________________________________________________________________________________________--

https://www.geeksforgeeks.org/program-evaluate-simple-expressions/

https://kathircks.blogspot.com/2019/02/check-whether-given-mathematical.html
https://gist.github.com/ravikiran0606/ff09ce0bf17d6335cd4eb7657f376355


________________________________________________________________________________________________________________________________________________________________________________________________

#include <iostream>
using namespace std;


bool Alphabet(char a)
{

       if (a == 'a' || a == 'b'||a == 'c' ||a == 'd' || a == 'e'
            || a == 'f' || a == 'g' || a == 'h' || a == 'i'
            || a == 'j' || a == 'k' || a == 'l' || a == 'm'
            || a == 'n' || a == 'o' || a == 'p' || a == 'q' || a == 'r'
            || a == 's' || a == 't' || a == 'u' || a == 'v' || a == 'w'
            || a == 'x' || a == 'y' || a == 'z'
            || a == 'A' || a == 'B' || a == 'C' || a == 'D' || a == 'E'
            || a == 'F' || a == 'G' || a == 'H' || a == 'I' || a == 'J'
            || a == 'K' || a == 'L' || a == 'M' || a == 'N' || a == 'O' || a == 'P'
            || a == 'Q' || a == 'R' || a == 'S' || a == 'T' || a == 'U' || a == 'V'
            || a == 'W' || a == 'X' || a == 'Y' || a == 'Z' || a == '=')
    {
       return (true);
    }
    else
        return (false);


}

bool isOperand(char T)
{
    return ((T >= '0' && T <= '9')|| Alphabet(T)) ;
}

int value(char T)
{
    return (T - '0');
}

int Check(char *exp)
{

    if (*exp == '\0')
    {
        cout<<"Given expression is empty!\n";
        return -1;

    }


    for (int i = 1; exp[i]; i += 2)
    {

        char opr = exp[i], opd = exp[i+1];


        if (!isOperand(opd))
        {
            return -1;
        }


    }

    return 1;

}

int main()
{
    char expression[100];
    int result;

    cout<<"Enter your Mathematical Expression : ";
    cin>>expression;
    cout<<"\n"<<endl;

    result = Check(expression);
    if(result == -1)
    {
        cout << "Given "<<expression << " is " << "Invalid!\n";
    }
    else
    {
        cout << "Given " << expression << " is " << "Valid.\n" << endl;
    }


    return 0;
}











